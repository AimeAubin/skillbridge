generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
    ADMIN
    USER
}

model User {
    id            String      @id @default(cuid())
    name          String?
    email         String?     @unique
    password      String?
    role          UserRole    @default(USER)
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    skills        UserSkill[]
    goals         Goal[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Skill {
    id        String      @id @default(cuid())
    name      String      @unique
    category  Category    @default(SOFTSKILLS)
    users     UserSkill[]
    goals     Goal[]
    createdAt DateTime    @default(now())
    updatedAt DateTime    @updatedAt
}

model UserSkill {
    id               String           @id @default(cuid())
    proficiencyLevel ProficiencyLevel @default(BEGINNER)
    user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId           String
    skill            Skill            @relation(fields: [skillId], references: [id], onDelete: Cascade)
    skillId          String
    createdAt        DateTime         @default(now())
    updatedAt        DateTime         @updatedAt

    @@unique([userId, skillId])
}

model Goal {
    id                 String     @id @default(cuid())
    userId             String
    user               User       @relation(fields: [userId], references: [id])
    skillId            String
    skill              Skill      @relation(fields: [skillId], references: [id])
    desiredProficiency String
    status             GoalStatus @default(ACTIVE) // Replacing isActive and isCompleted
    createdAt          DateTime   @default(now())
    updatedAt          DateTime   @updatedAt
}

enum ProficiencyLevel {
    BEGINNER
    INTERMEDIATE
    ADVANCED
}

enum Category {
    SOFTSKILLS
    TECHNICAL
    LEADERSHIP
    COMMUNICATION
}

enum GoalStatus {
    ACTIVE
    COMPLETED
    INACTIVE
}
